// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                         String                   @id @default(cuid())
  /// The Magic issuer of the user who created the account. Its a decentralized
  /// identifier (DID) that uniquely identifies the user.
  did                        String                   @unique
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  email                      String                   @unique
  name                       String                   @default("")
  acceptedTermsAndConditions Boolean                  @default(false)
  memberships                Membership[]
  authSession                UserAuthSession[]
  createdInviteLinks         OrganizationInviteLink[]
  inviteLinkUse              InviteLinkUse[]
  // The Stripe subscriptions that the user has created. A user can have
  // multiple subscriptions: both for each organization they are paying for, and
  // multiple subscriptions for the same organization if that organization uses
  // multiple products.
  stripeSubscriptions        StripeSubscription[]
  // The Stripe customer ID of the user in the Stripe dashboard.
  stripeCustomerId           String                   @default("")
}

model UserAuthSession {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Organization {
  id                      String                   @id() @default(cuid())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  name                    String
  /// We avoid conflicts from slugs by using Prisma middleware. See the file
  /// `database.server.ts`.
  slug                    String                   @unique
  memberships             Membership[]
  organizationInviteLinks OrganizationInviteLink[]
  stripeSubscriptions     StripeSubscription[]
}

model Membership {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  member         UserProfile  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  deactivatedAt  DateTime?
  // The role of the member in the organization. Possible values are "member",
  // "admin", and "owner".
  role           String       @default("member")

  @@id([memberId, organizationId])
}

model OrganizationInviteLink {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  // The user who created the invite link.
  creator        UserProfile?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId      String?
  // Users who used the invite link.
  linkUsages     InviteLinkUse[]
  // The date when the invite link expires.
  expiresAt      DateTime
  // The token that is used to authenticate the invite link.
  token          String          @unique
  // The date when the link was manually deactivated.
  deactivatedAt  DateTime?
}

model InviteLinkUse {
  id           String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  // The invite link that was used.
  inviteLink   OrganizationInviteLink @relation(fields: [inviteLinkId], references: [id], onDelete: Cascade)
  inviteLinkId String
  // The user who used the invite link.
  user         UserProfile?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?

  @@unique([inviteLinkId, userId])
}

model StripeSubscription {
  /// Unique identifier for the object.
  id                 String       @id
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String
  buyer              UserProfile  @relation(fields: [buyerId], references: [id])
  buyerId            String
  /// Time at which the object was created. Stripe measures it in in seconds
  /// since the Unix epoch, but we convert it to a Date.
  created            DateTime
  /// If the subscription has been canceled with the at_period_end flag set to
  /// true, cancel_at_period_end on the subscription will be true. You can use
  /// this attribute to determine whether a subscription that has a status of
  /// active is scheduled to be canceled at the end of the current period.
  cancelAtPeriodEnd  Boolean
  /// End of the current period that the subscription has been invoiced for. At
  /// the end of this period, a new invoice will be created.
  currentPeriodEnd   DateTime
  /// Start of the current period that the subscription has been invoiced for.
  currentPeriodStart DateTime
  /// Stringified list of subscription items, each with an attached price.
  items              String
  /// Possible values are incomplete, incomplete_expired, trialing, active,
  /// past_due, canceled, or unpaid.
  status             String
}

model ContactSalesFormSubmission {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyName String
  firstName   String
  lastName    String
  message     String   @default("")
  phoneNumber String   @default("")
  workEmail   String
}
